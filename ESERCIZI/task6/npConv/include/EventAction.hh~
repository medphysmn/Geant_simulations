// $Id: EventAction.hh 25 2010-01-05 17:18:05Z adotti $

/**
 * @file   EventAction.hh
 *
 * @date   17 Dec 2009
 * @author adotti
 *
 * @brief  User's EventAction.
 */

#ifndef EVENTACTION_HH_
#define EVENTACTION_HH_


#include "G4UserEventAction.hh"
#include "G4String.hh"
#include "GasHit.hh"
#include "SensitiveDetector.hh"
#include "TrackParticle.hh"
#include "RootSaver.hh"
#include "TrackParentParticle.hh"

//ROOT stuff

#include "TH1F.h"
#include "TFile.h"

//class SensitiveDetector

class G4Event;
class RootSaver;

/*!
 * \brief User's EventAction class
 * This class implements the Event Action.
 * The relevant method is \sa EndOfEventAction where the
 * digitization (\sa SiDigitizer class) and the storage of hits and digits
 * in a ROOT TTree are perfomed (\sa RootSaver class).
 */
class EventAction : public G4UserEventAction
{
public:
  //! Default constructor
  EventAction();
  //! Default destruc tor
  virtual ~EventAction();
  //! Beginning of event
  void BeginOfEventAction(const G4Event* anEvent);
  //! Digitize hits and store information
  void EndOfEventAction(const G4Event* anEvent);
  //! Set the RootSaver
  inline void SetRootSaver( RootSaver* saver ) { rootSaver = saver; }
  G4double edep;
  G4int layer;
  
  
  TH1F* hene;
  void AssignHisto(TH1F* histo = 0);

  SensitiveDetector* GetSensitiveDetector(G4String detname);
  

private:
  //     	    //! pointer to saver object
  RootSaver* rootSaver;
  //     	    //! hits collection name
  G4String hitsCollName;
  //     	    //! digits collection name
  //     	    G4String digitsCollName;
  //     	    //! Hits collection ID
  G4int hitsCollID;

  typedef std::map<G4int,TrackParticle*> trackMap_t;

};

#endif /* EVENTACTION_HH_ */
